#!env python3
import argparse
from audiomaister import VoiceFixer
from audiomaister.models.gs_audiomaister import AudioMaister
import torch

def load_default_weights():
    from huggingface_hub import hf_hub_download
    from pathlib import Path

    REPO_ID = "peterwilli/audio-maister"
    print(f"Loading standard model weight at {REPO_ID}")
    MODEL_FILE_NAME = "audiomaister_v1.5.ckpt"
    checkpoint_path = hf_hub_download(repo_id=REPO_ID, filename=MODEL_FILE_NAME)
    return checkpoint_path

@torch.no_grad()
def main(input_file, output_file, checkpoint, accelerator, **kwargs):
    if checkpoint is None:
        checkpoint = load_default_weights()
    state = torch.load(checkpoint)
    main_model = VoiceFixer(state['hparams'], 1, 'vocals')
    main_model.load_state_dict(state['weights'])
    inference_model = AudioMaister(main_model)
    inference_model.restore(input=input_file, output=output_file, mode=0)       
    if accelerator == 'cuda':
        main_model.to('cuda')
        inference_model.to('cuda')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Audio Processing Script")
    parser.add_argument("--input_file", help="Path to the input audio file (FLAC or WAV)", required=True)
    parser.add_argument("--output_file", help="Path to the output audio file", required=True)
    parser.add_argument("--checkpoint", help="Path to the model checkpoint file", required=False)
    parser.add_argument("--accelerator", help="In case you use a hardware accelerator", choices=["cuda"], required=False)

    args = parser.parse_args()

    main(**vars(args))